"""""""""""""""Import packages"""""""""""""""import osimport numpy as npimport pandas as pd import seaborn as snsimport matplotlibimport matplotlib.pyplot as plt  from matplotlib.pyplot import figureplt.style.use('ggplot')# %matplotlib inline is for setting the # backend of matplotlib to the 'inline' backend# Adjusts the plot sizematplotlib.rcParams['figure.figsize'] = (12, 8)"""""""""""""""Load data"""""""""""""""os.chdir('/Users/umreenimam/Documents/Coding/data_analysis/movie_industry')filename = 'movies.csv'movies_df = pd.read_csv(filename)"""""""""""""""Clean and format data"""""""""""""""# Find missing data for col in movies_df.columns:     percent_missing = np.mean(movies_df[col].isnull())    print('{} - {}%'.format(col, percent_missing))# Data types for columnsmovies_df.dtypes# Change data type of budget and gross to int64movies_df['budget'] = movies_df['budget'].astype('int64')movies_df['gross'] = movies_df['gross'].astype('int64')# Create new year columnmovies_df['year_correct'] = movies_df['released'].astype(str).str[:4]# Order data by gross revenuemovies_df = movies_df.sort_values(by = ['gross'], inplace = False, ascending = False)# Drop duplicate data across whole data frame# movies_df.drop_duplicates()# Drop duplicate data across specific column# movies_df['company'] = movies_df['company'].drop_duplicates().sort_values(ascending = False)"""""""""""""""Build plots to explore correlations between different columns"""""""""""""""plt.scatter(x = movies_df['budget'],             y = movies_df['gross'])plt.title('Budget vs. Gross Earnings')plt.xlabel('Budget for film')plt.ylabel('Gross Earnings')plt.show()# Plot vs. Budget correlation using seaborn sns.regplot(x = 'budget',             y = 'gross',             data = movies_df,             scatter_kws = {'color': 'red'},             line_kws = {'color': 'blue'})# Getting correlation amountsmovies_df.corr(method = 'spearman')movies_df.corr(method = 'kendall')movies_df.corr(method = 'pearson')# High correlation between budget and gross# Create correlation matrixcorr_mat = movies_df.corr()# Create heatmap sns.heatmap(corr_mat,             annot = True)plt.title('Corrleation Matrix for Numeric Data')plt.xlabel('Movie Features')plt.ylabel('Movie Features')# Create numerical values for string data typesdf_numeric = movies_dffor col_name in df_numeric.columns:    if(df_numeric[col_name].dtype == 'object'):        df_numeric[col_name] = df_numeric[col_name].astype('category')        df_numeric[col_name] = df_numeric[col_name].cat.codes# Create heatmap using new numeric data framedf_numeric_corr = df_numeric.corr()sns.heatmap(df_numeric_corr,             annot = True)plt.title('Corrleation Matrix for Numeric Data')plt.xlabel('Movie Features')plt.ylabel('Movie Features')"""""""""""""""Find correlations"""""""""""""""# Unstack to find pairs of correlationscorrelation_mat = df_numeric.corr()correlation_pairs = correlation_mat.unstack()# Sort pairssorted_pairs = correlation_pairs.sort_values()# Find high correlationshigh_correlation = sorted_pairs[(sorted_pairs) > 0.5]# Votes and budget have the highest correlation to gross earnings