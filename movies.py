"""""""""""""""Import packages"""""""""""""""import osimport numpy as npimport pandas as pd import seaborn as snsimport matplotlibimport matplotlib.pyplot as plt  from matplotlib.pyplot import figureplt.style.use('ggplot')# %matplotlib inline is for setting the # backend of matplotlib to the 'inline' backend# Adjusts the plot sizematplotlib.rcParams['figure.figsize'] = (12, 8)"""""""""""""""Functions"""""""""""""""def find_missing(data):    for col in data.columns:        percent_missing = np.mean(data[col].isnull())        print('{} - {}%'.format(col, percent_missing))def data_types(data):    return data.dtypesdef change_data_type(data, col, data_type):    data[col] = data[col].astype(data_type)    def order_data(data, col):    data = data.sort_values(by = [col], inplace = False, ascending = False)    return datadef drop_duplicates(data, col):    data[col] = data[col].drop_duplicates().sort_values(ascending = False)    return datadef convert_new_df(data, convert_from, convert_to):    new_df = data    for col_name in new_df.columns:        if(new_df[col_name].dtype == convert_from):            new_df[col_name] = new_df[col_name].astype(convert_to)            new_df[col_name] = new_df[col_name].cat.codes        return new_dfdef find_sort_correlations(data, sort_by):    corr_mat = data.corr()    corr_pairs = corr_mat.unstack()        sort_pairs = corr_pairs.sort_values()    high_corr = sort_pairs[(sort_pairs) > sort_by]        return high_corr"""""""""""""""Load data"""""""""""""""os.chdir('/Users/umreenimam/Documents/Coding/data_analysis/movie_industry')filename = 'movies.csv'movies_df = pd.read_csv(filename)"""""""""""""""Clean and format data"""""""""""""""# Find missing data find_missing(movies_df)# Data types for columnsdata_types(movies_df)# Change data type of budget and gross to int64change_data_type(movies_df, 'budget', 'int64')change_data_type(movies_df, 'gross', 'int64')# Create new year column and convert to int64movies_df['year_correct'] = movies_df['released'].astype(str).str[:4]change_data_type(movies_df, 'year_correct', 'int64')# Order data by gross revenueorder_data(movies_df, 'gross')"""""""""""""""Build plots to explore correlations between different columns"""""""""""""""plt.scatter(x = movies_df['budget'],             y = movies_df['gross'])plt.title('Budget vs. Gross Earnings')plt.xlabel('Budget for film')plt.ylabel('Gross Earnings')plt.show()# Plot vs. Budget correlation using seaborn sns.regplot(x = 'budget',             y = 'gross',             data = movies_df,             scatter_kws = {'color': 'red'},             line_kws = {'color': 'blue'})# Getting correlation amounts using different methods# movies_df.corr(method = 'spearman')# movies_df.corr(method = 'kendall')# movies_df.corr(method = 'pearson')# OBSERVATION: There is a high correlation between budget and gross# Create correlation matrix using default pearson method# Create heatmap corr_mat = movies_df.corr()sns.heatmap(corr_mat,             annot = True)plt.title('Corrleation Matrix for Numeric Data')plt.xlabel('Movie Features')plt.ylabel('Movie Features')# Create numerical values data frame for string data typesdf_numeric = convert_new_df(movies_df, 'object', 'category')# print(df_numeric)# Create heatmap using new numeric data framedf_numeric_corr = df_numeric.corr()sns.heatmap(df_numeric_corr,             annot = True)plt.title('Corrleation Matrix for Numeric Data')plt.xlabel('Movie Features')plt.ylabel('Movie Features')"""""""""""""""Find correlations"""""""""""""""find_sort_correlations(df_numeric, 0.5)# OBSERVATION: Votes and budget have the highest correlation to gross earnings